version: "3.8"

services:
  # Redis for session storage and pub/sub
  redis:
    image: redis:7-alpine
    container_name: saas-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-devpassword123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    networks:
      - saas-network

  # PostgreSQL (optional - for when not using Neon)
  postgres:
    image: postgres:15-alpine
    container_name: saas-postgres-dev
    environment:
      POSTGRES_DB: ${DB_NAME:-saasdb}
      POSTGRES_USER: ${DB_USER:-saasuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpassword123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-saasuser} -d ${DB_NAME:-saasdb}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - saas-network

  # SaaS Application
  app:
    build: .
    container_name: saas-app-dev
    environment:
      NODE_ENV: development
      DATABASE_URL: ${DATABASE_URL:-postgresql://saasuser:devpassword123@postgres:5432/saasdb}
      REDIS_URL: redis://:${REDIS_PASSWORD:-devpassword123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key}
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - saas-network
    command: npm run dev

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  saas-network:
    driver: bridge
