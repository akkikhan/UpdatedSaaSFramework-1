version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:16-alpine
    container_name: saas-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-saas_framework}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - saas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-saas_framework}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching (Production)
  redis:
    image: redis:7-alpine
    container_name: saas-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: saas-app-prod
    restart: always
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-saas_framework}
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - FROM_NAME=${FROM_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - PLATFORM_NAME=${PLATFORM_NAME}
      - PLATFORM_URL=${PLATFORM_URL}
    networks:
      - saas-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 5000, path: '/api/health', timeout: 2000 }; const request = http.request(options, (res) => { process.exitCode = (res.statusCode === 200) ? 0 : 1; }); request.on('error', () => { process.exitCode = 1; }); request.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: saas-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - saas-network
    depends_on:
      - app

networks:
  saas-network:
    driver: bridge

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
