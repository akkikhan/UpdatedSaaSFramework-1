// Gmail Email Test Script
import { config } from "dotenv";
import nodemailer from "nodemailer";

config();

async function testGmailConfiguration() {
  console.log("üîç Testing Gmail configuration...\n");

  // Check if required environment variables are set
  const requiredVars = ["FROM_EMAIL", "SMTP_USERNAME", "SMTP_PASSWORD"];
  const missingVars = requiredVars.filter(
    varName => !process.env[varName] || process.env[varName].includes("your-")
  );

  if (missingVars.length > 0) {
    console.log("‚ùå Missing or placeholder Gmail credentials:");
    missingVars.forEach(varName => {
      console.log(`   - ${varName}: ${process.env[varName] || "not set"}`);
    });
    console.log("\nüìã Please update your .env file with actual Gmail credentials:");
    console.log("   1. FROM_EMAIL=your-actual-email@gmail.com");
    console.log("   2. SMTP_USERNAME=your-actual-email@gmail.com");
    console.log("   3. SMTP_PASSWORD=your-16-char-app-password");
    console.log("\nüìñ See GMAIL_SETUP_GUIDE.md for detailed instructions");
    process.exit(1);
  }

  const config = {
    host: process.env.SMTP_HOST || "smtp.gmail.com",
    port: parseInt(process.env.SMTP_PORT || "587"),
    secure: false, // true for 465, false for other ports
    auth: {
      user: process.env.SMTP_USERNAME,
      pass: process.env.SMTP_PASSWORD,
    },
  };

  console.log("üìß Gmail Configuration:");
  console.log(`   Host: ${config.host}:${config.port}`);
  console.log(`   Username: ${config.auth.user}`);
  console.log(`   From Email: ${process.env.FROM_EMAIL}`);
  console.log(`   From Name: ${process.env.FROM_NAME || "SaaS Factory Platform"}`);
  console.log();

  try {
    // Create transporter
    const transporter = nodemailer.createTransporter(config);

    // Verify connection
    console.log("üîÑ Verifying SMTP connection...");
    await transporter.verify();
    console.log("‚úÖ SMTP connection verified successfully!");

    // Send test email
    console.log("üì§ Sending test email...");
    const info = await transporter.sendMail({
      from: `"${process.env.FROM_NAME || "SaaS Factory Platform"}" <${process.env.FROM_EMAIL}>`,
      to: process.env.ADMIN_EMAIL || process.env.FROM_EMAIL,
      subject: "Gmail Configuration Test - SaaS Factory Platform",
      html: `
        <h2>üéâ Gmail Configuration Successful!</h2>
        <p>This is a test email to confirm that your Gmail configuration is working correctly.</p>
        <div style="background-color: #f0f8ff; padding: 15px; border-radius: 5px; margin: 20px 0;">
          <h3>Configuration Details:</h3>
          <ul>
            <li><strong>SMTP Host:</strong> ${config.host}</li>
            <li><strong>Port:</strong> ${config.port}</li>
            <li><strong>From Email:</strong> ${process.env.FROM_EMAIL}</li>
            <li><strong>Timestamp:</strong> ${new Date().toISOString()}</li>
          </ul>
        </div>
        <p>Your SaaS platform is now ready to send emails via Gmail!</p>
        <hr>
        <small>This email was generated by the Gmail test script in your SaaS Factory Platform.</small>
      `,
    });

    console.log("‚úÖ Test email sent successfully!");
    console.log(`   Message ID: ${info.messageId}`);
    console.log(`   Recipient: ${process.env.ADMIN_EMAIL || process.env.FROM_EMAIL}`);
    console.log();
    console.log("üéâ Gmail configuration is working correctly!");
    console.log("   Your SaaS platform can now send emails via Gmail.");
  } catch (error) {
    console.error("‚ùå Gmail configuration test failed:");
    console.error(`   Error: ${error.message}`);
    console.log();
    console.log("üîß Troubleshooting steps:");
    console.log("   1. Verify your Gmail credentials in .env file");
    console.log("   2. Ensure 2FA is enabled on your Gmail account");
    console.log("   3. Generate a new App Password: https://myaccount.google.com/apppasswords");
    console.log("   4. Check if 'Less secure app access' is disabled (it should be)");
    console.log("   5. See GMAIL_SETUP_GUIDE.md for detailed instructions");
  }
}

testGmailConfiguration().catch(console.error);
